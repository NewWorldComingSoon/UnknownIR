# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(UnknownRebuilder
	LANGUAGES
		CXX
)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Output)
add_definitions(-DUNKNOWN_REBUILDER_SRC_DIR="${CMAKE_CURRENT_SOURCE_DIR}")

if(ENABLE_TEST) # test_mode
	add_definitions(-DENABLE_TEST)
endif()

if(ENABLE_TEST) # test_mode
	# Subdirectory: test
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/test")
	else()
		set(CMAKE_FOLDER test)
	endif()
	add_subdirectory(test)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()
# Subdirectory: 3rdparty
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/3rdparty")
else()
	set(CMAKE_FOLDER 3rdparty)
endif()
add_subdirectory(3rdparty)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: tools
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/tools")
else()
	set(CMAKE_FOLDER tools)
endif()
add_subdirectory(tools)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: UnknownIR
set(UnknownIR_SOURCES
	"src/UnknownIR/ContextImpl/UnknownIR.ContextImpl.cpp"
	"src/UnknownIR/Internal/InternalErrors/UnknownIR.InternalErrors.cpp"
	"src/UnknownIR/UnknownIR.BasicBlock.cpp"
	"src/UnknownIR/UnknownIR.Constant.cpp"
	"src/UnknownIR/UnknownIR.Context.cpp"
	"src/UnknownIR/UnknownIR.Function.cpp"
	"src/UnknownIR/UnknownIR.GlobalVariable.cpp"
	"src/UnknownIR/UnknownIR.Instruction.cpp"
	"src/UnknownIR/UnknownIR.LocalVariable.cpp"
	"src/UnknownIR/UnknownIR.Module.cpp"
	"src/UnknownIR/UnknownIR.Object.cpp"
	"src/UnknownIR/UnknownIR.OpCode.cpp"
	"src/UnknownIR/UnknownIR.Type.cpp"
	"src/UnknownIR/UnknownIR.User.cpp"
	"src/UnknownIR/UnknownIR.Value.cpp"
	"src/UnknownIR/ContextImpl/ContextImpl.h"
	"src/UnknownIR/Internal/InternalConfig/InternalConfig.h"
	"src/UnknownIR/Internal/InternalErrors/InternalErrors.h"
	"include/UnknownIR/BasicBlock.h"
	"include/UnknownIR/Constant.h"
	"include/UnknownIR/Context.h"
	"include/UnknownIR/Function.h"
	"include/UnknownIR/GlobalVariable.h"
	"include/UnknownIR/Instruction.h"
	"include/UnknownIR/LocalVariable.h"
	"include/UnknownIR/Module.h"
	"include/UnknownIR/Object.h"
	"include/UnknownIR/OpCode.h"
	"include/UnknownIR/Type.h"
	"include/UnknownIR/UnknownIR.h"
	"include/UnknownIR/User.h"
	"include/UnknownIR/Value.h"
	cmake.toml
)

add_library(UnknownIR)

target_sources(UnknownIR PRIVATE ${UnknownIR_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${UnknownIR_SOURCES})

target_compile_features(UnknownIR PUBLIC
	cxx_std_20
)

target_include_directories(UnknownIR PUBLIC
	"src/UnknownIR"
	include
	"include/UnknownIR"
)

# Target: UnknownFrontend
set(UnknownFrontend_SOURCES
	"src/UnknownFrontend/UnknownFrontend.cpp"
	"src/UnknownFrontend/x86/UnknownFrontend.x86.cpp"
	"include/UnknownFrontend/UnknownFrontend.h"
	"include/UnknownFrontend/x86/UnknownFrontend.x86.h"
	cmake.toml
)

add_library(UnknownFrontend)

target_sources(UnknownFrontend PRIVATE ${UnknownFrontend_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${UnknownFrontend_SOURCES})

target_compile_features(UnknownFrontend PUBLIC
	cxx_std_20
)

target_include_directories(UnknownFrontend PUBLIC
	"3rdparty/capstone-retdec/include"
	"src/UnknownFrontend"
	include
	"include/UnknownFrontend"
)

target_link_libraries(UnknownFrontend PUBLIC
	capstone-static
	UnknownIR
)

# Target: UnknownBackend
set(UnknownBackend_SOURCES
	"src/UnknownBackend/UnknownBacktend.cpp"
	"include/UnknownBackend/UnknownBacktend.h"
	cmake.toml
)

add_library(UnknownBackend)

target_sources(UnknownBackend PRIVATE ${UnknownBackend_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${UnknownBackend_SOURCES})

target_compile_features(UnknownBackend PUBLIC
	cxx_std_20
)

target_include_directories(UnknownBackend PUBLIC
	"src/UnknownBackend"
	include
	"include/UnknownBackend"
)

target_link_libraries(UnknownBackend PUBLIC
	UnknownIR
)

